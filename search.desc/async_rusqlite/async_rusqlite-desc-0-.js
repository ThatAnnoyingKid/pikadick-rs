searchState.loadedDescShard("async_rusqlite", 0, "A db access panicked\nThis database was already joined\nA connection to a SQLite database.\nA database connection\nContains the error value\nError\nFailed to get result from db\nContains the success value\nRusqlite error\nFailed to send message to db\nSetup failed to run\nCopied from tokio\nBad thread join\nTokio Join Error\nAccess the database.\nOpen a handle to the BLOB located in <code>row_id</code>, <code>column</code>, <code>table</code> …\nOpen a db in a blocking manner.\nRegister a callback to handle <code>SQLITE_BUSY</code> errors.\nSet a busy handler that sleeps for a specified amount of …\nFlush caches to disk mid-transaction\nReturn the number of rows modified, inserted or deleted by …\nClose the db.\nClose the SQLite connection.\nReturns the current value of a <code>config</code>.\nConvenience method to prepare and execute a single SQL …\nConvenience method to run multiple SQL statements (that …\nRemove/finalize all prepared statements currently in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Connection</code> from a raw handle.\nCreate a <code>Connection</code> from a raw owned handle.\nGet access to a handle that can be used to interrupt long …\nGet access to the underlying SQLite database connection …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the inner value\nTest for auto-commit mode. Autocommit mode is on by …\nDetermine if all associated prepared statements have been …\nDetermine if a database is read-only\nJoin background thread.\nGet the SQLite rowid of the most recent successful INSERT.\nOpen a database at the given path with the setup func.\nOpen a new connection to a SQLite database. If a database …\nOpen a new connection to an in-memory SQLite database.\nOpen a new connection to an in-memory SQLite database.\nOpen a new connection to an in-memory SQLite database …\nOpen a new connection to a SQLite database.\nOpen a new connection to a SQLite database using the …\nReturns the path to the database file, if one exists and …\nQuery the current value(s) of <code>pragma_name</code> associated to …\nQuery the current rows/values of <code>pragma_name</code>.\nQuery the current value of <code>pragma_name</code>.\nSet a new value to <code>pragma_name</code>.\nSet a new value to <code>pragma_name</code> and return the updated …\nPrepare a SQL statement for execution.\nPrepare a SQL statement for execution, returning a …\nPrepare a SQL statement for execution.\nRegister or clear a callback function that can be used for …\nConvenience method to execute a query that is expected to …\nConvenience method to execute a query that is expected to …\nBegin a new savepoint with the default behavior (DEFERRED).\nBegin a new savepoint with a specified name.\nMake configuration changes to a database connection\nSet the maximum number of cached prepared statements this …\nRegister or clear a callback function that can be used for …\nBegin a new transaction with the default behavior …\nDetermine the transaction state of a database\nBegin a new transaction with a specified behavior.\nBegin a new transaction with the default behavior …")