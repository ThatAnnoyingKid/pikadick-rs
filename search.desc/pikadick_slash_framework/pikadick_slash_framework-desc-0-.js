searchState.loadedDescShard("pikadick_slash_framework", 0, "An argument.\nAn argument param builder\nBool\nBool\nBuilder Error\nA slash framework command\nA builder for a <code>Command</code>.\nError while converting from an interaction\nA datatype\nSomething was duplicated\nContains the error value\nA framework\nA FrameworkBuilder for slash commands.\nConvert from an option value\nA trait that allows converting from an application command …\nA slash framework help command\nA builder for a <code>HelpCommand</code>.\nInteger\nInteger\nA field is missing\nMissing a required field\nContains the success value\nthe reason a check failed\nA string\nA string\nThe type is unknown\nAdd an argument\nAdd an argument\nGet the command arguments\nAdd many arguments\nGet the help command arguments\nGet this as a str\nBuild the <code>Command</code>\nBuild the <code>HelpCommand</code>\nBuild a framework\nBuild the argument param\nAdd a check to this specific command\nAdd a check\nGet the inner checks\nAdd a command\nGet the command description\nThe command description\nGet the help command description\nThe help command description\nGet the description of the argument\nSet the description\nFire the on_process hook\nFire the on_process hook\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the type of a <code>CommandDataOptionValue</code>.\nParse from an option value\nMake arguments from a <code>CommandInteraction</code>\nGet the argument paramss of this object\nGet the argument paramss of this object\nThe expected data type\nKind of a hack to get the default “missing” value if …\nKind of a hack to get the default “missing” value if …\nAdd a help command\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the argument kind\nSet the kind\nInfo for logging\nGet the command name\nThe command name\nGet the name of the argument\nSet the name\nMake a new <code>CommandBuilder</code>.\nMake a new <code>HelpCommandBuilder</code>.\nMake a new <code>FrameworkBuilder</code>.\nMake a new <code>ArgumentParamBuilder</code>.\nCreate a new reason where nothing is known\nCreate a new reason that has user data\nThe on_process hook\nThe on_process hook\nProcess an interaction create event\nRegister this command\nRegister this help command\nRegister the framework.\nCheck if the argument is required\nSet if the argument is required\nThe user-facing reason for a failure\nThe actual datatype.\nThe expected datatype\nThe expected datatype\nName of the field that failed.\nthe name of the missing field")