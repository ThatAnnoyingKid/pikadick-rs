searchState.loadedDescShard("r6tracker", 0, "R6tracker Client\nThe username is empty\nContains the error value\nError Type\nAn API Response returned an error\nAn Overwolf Response returned an error.\nContains the success value\nResult type\nReqwest HTTP error\nUrl Parse Error\nThe inner http client\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet player info using the Overwolf API.\nGet an r6tracker profile\nGet the sessions for a user\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake a new client\n<code>ToString::to_string</code>, but without panic on OOM.\nOverwolf API Types\nStat Data Type\nUser Data Type\nAn Invalid Response\nThe error that occurs when an OverwolfResponse is in an …\nAn Overwolf Operator\nAn Overwolf Player\nOverwolf Rank Info\nA Json Overwolf Response\nSeasonal stats. This may also represent hidden casual …\nSeasonal Operator data\nA Valid response\nAvatar URL\nCurrent Rank Info\nThe current season\nCurrent season best region stats\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the current casual season stats for this user\nGet the lifetime K/D for ranked\nGet lifetime ranked win %\nGet the season with the max mmr\nGet the valid member as an Option.\nSeason image URL\nOperator Image\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurn this into a Result.\nWhether this operator is attack\nProbably r6tracker premium\nWhether this season represents a ranked season\nWhether this operator is this user’s top operator\nIterate over ranked seasons where the user placed\nIterate over ranked seasons\nThe K/D this season\nThe K/D with this op\nThe # of kills this season\nThe total # of kills with this op\nPlayer Level\nOverwolf Lifetime Stats\nLifetime Stats\nThe # of matches this season\nThe max mmr for this season\nMax Rank Info\nMMR\nMMR\nMaybe the change in mmr this season?\nPlayer name\nOperator name\nNext Rank Info\nOperator Stats\nOperator Stats\nPlayer ID\nPrevious Rank Info\nThe icon url for this rank\nThe rank name\nThe name of this rank\nUnknown\nSeason Region\nThe label of the region\nSeason #\nSeasonal Operator Stats\nAll seasonal stats\nStarted tracking datetimestamp\nWhether this person is a suspected cheater\nTake the valid member, consuming this struct. Same …\nThe time played (in seconds?)\nThe time played as a user-displayable string\n<code>ToString::to_string</code>, but without panic on OOM.\nUnknown keys\nUnknown keys\nUnknown keys\nUnknown keys\nUnknown keys\nWin Percent\nWin %\nThe # of wins this season\nThe total # of wins with this op\nBest Overwolf Lifetime MMR\nPlayer Lifetime Stats\nBest MMR Stats\nTotal # of blind kills\nTotal # of deaths\nReturns the argument unchanged.\nReturns the argument unchanged.\nTotal headshot %\nTotal # of headshots\nRank Image URL\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTotal K/D\nTotal # of kills\nTotal # of losses\nTotal # of matches\nTotal # of melee kills\nMMR\nRank Name\nUnknown keys\nUnknown Keys\nWin Percent\nTotal # of wins\nTotal # of XP\nError when a u32 cannot be converted into a platform.\nThe representation of a platform\nConverts a platform into its code\nReturns the argument unchanged.\nReturns the argument unchanged.\nTries to convert a u32 into a Platform\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nErrors that occured while procesing an API Request\nA json response from the UserData API.\nAn Invalid Response\nAn R6 Rank.\nA Valid Response\nGet user avatar url\nCollection of ranked seasons stats\nGets top mmr from all servers.\nGet the MMR for this user.\nGet the image url for the rank this user is at gloablly\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet total # of deaths\nGet total # of kills\nGet the latest stats for the latest ranked region/season …\nGet the season where the user attained their max ranking\nUnique user id\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this into as Result.\nGet overall K/D\nThe error message\nMetadata\nGet a string rep of this rank\nGet user tag name\nSeason data type\nGets this season’s color as a string hex value\nTries to parse this season’s hex color as a u32\nA collection of all stats\nConsume self and return the invalid variant, or None.\nConsume self and return the valid variant, or None.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nUnknown fields\nGet Overall W/L\nA representation of a ranked season/region\nGets current mmr for this region in this season\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the max mmr\nGet the max rank\nGet Win / Loss this season/region")