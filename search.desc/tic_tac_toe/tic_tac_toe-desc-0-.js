searchState.loadedDescShard("tic_tac_toe", 0, "The # of tic-tac-toe tiles\nRun minimax on a board.\nA Tic Tac Toe board\nThe win type\nWinner Info\nDecode a <code>u16</code> into a board\nEncode this board as a <code>u16</code>.\nGet the highest tile index\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the tile at the index.\nGet the team whos turn it is.\nGet the winner if they exist\nGet the winner info, if there is a winner\nCheck if the given team won.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if it is a draw.\nGet an iterator over the tiles.\nGet an iterator over child board states.\nMake a new <code>Board</code>.\nSet the tile at the index.\nGet the least tile index\nThe winning team\nThe tile_indexes that are part of the win.\nThe win type\nThe char is not valid.\nFailed to parse a <code>Team</code> from a <code>char</code>.\nThe string is the wrong length. It must contain exactly â€¦\nFailed to parse a <code>Team</code> from a <code>str</code>.\nA Tic Tac Toe Team\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTry to parse a <code>Team</code> from a <code>char</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvert the teams")