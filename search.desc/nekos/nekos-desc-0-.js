searchState.loadedDescShard("nekos", 0, "Client for nekos.moe\nLibrary Error\nNeko images\nA list of neko images\nInvalid URL\nReqwest HTTP Error\nA parsed URL record.\nThe approver\nArtist\nReturn the serialization of this URL.\nReturn the authority of this URL as an ASCII string.\nReturn whether this URL is a cannot-be-a-base URL, meaning …\nThe inner http client\nComments\ncreated date\nSerialize with Serde using the internal representation of …\nIf this URL has a host and it is a domain name (not an IP …\nof favorites\nReturn this URL’s fragment identifier, if any.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a directory name as <code>std::path::Path</code> into an URL in …\nConvert a file name as <code>std::path::Path</code> into an URL in the …\nGet a random list of catgirls.\nGet the url\nReturn whether the URL has an ‘authority’, which can …\nEquivalent to <code>url.host().is_some()</code>.\nReturn the parsed representation of the host for this URL. …\nReturn the string representation of the host (domain or IP …\nImage id\nImages list\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the serialization of this URL.\nReturn whether the URL is special (has a special scheme)\nParse a string as an URL, with this URL as the base URL.\nof likes\nCreates a relative URL if possible, with this URL as the …\nMake a new client\nWhether this is nsfw\nReturn a default <code>ParseOptions</code> that can fully configure the …\nReturn the origin of this URL (…\nunknown\nParse an absolute URL from a string.\nParse an absolute URL from a string and add params to its …\nReturn the password for this URL, if any, as a …\nReturn the path for this URL, as a percent-encoded ASCII …\nUnless this URL is cannot-be-a-base, return an iterator of …\nReturn an object with methods to manipulate this URL’s …\nReturn the port number for this URL, if any.\nReturn the port number for this URL, or the default port …\nReturn this URL’s query string, if any, as a …\nParse the URL’s query string, if any, as …\nManipulate this URL’s query string, viewed as a sequence …\nReturn the scheme of this URL, lower-cased, as an ASCII …\nSerialize with Serde using the internal representation of …\nChange this URL’s fragment identifier.\nChange this URL’s host.\nChange this URL’s host to the given IP address.\nChange this URL’s password.\nChange this URL’s path.\nChange this URL’s port number.\nChange this URL’s query string. If <code>query</code> is <code>None</code>, this …\nChange this URL’s scheme.\nChange this URL’s username.\nResolve a URL’s host and port number to <code>SocketAddr</code>.\nTags\nAssuming the URL is in the <code>file</code> scheme or similar, convert …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nUnknown data\nThe uploader\nReturn the username for this URL (typically the empty …")