searchState.loadedDescShard("pikadick", 0, "Pikadick\nData from the setup function\nThe async entry\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe main entry.\nThe actual entry point\nPre-main setup\nSet up a serenity client\nAdmin Check\nEnabled Check\nEnsure a user is admin\nAdd a group to have its commands enabled/disabled.\nCheck if 2 <code>Check</code>s are the same.\nA way to look up commands by CommandOptions and fn addr.\nThe set of all commands as strings.\nCheck if a command is enabled via slash framework\nReturns the argument unchanged.\nReturns a mutex guard to the list of command names.\nCalls <code>U::from(self)</code>.\nMake a new <code>EnabledCheckData</code>.\nCLI Options\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA tool to build cache stats\nA type that can provide cache stats\nThe <code>ClientData</code>.\nThe config\nThe database\nThe deviantart client\nThe enabled check data\nEncoder Task\nThe fml client\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate cache stats Currently, In order for something to …\nInit this client data\nThe insta client data\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the inner stats\nThe iqdb client\nThe client for nekos\nMake a new <code>CacheStatsBuilder</code>.\nThe open ai client\nPublish stats to the provided <code>CacheStatsBuilder</code>.\nPublish a stat to a section\nThe quizizz client\nThe R6Stats client\nThe r6tracker client\nThe reddit embed data\nThe rule34 client\nThe sauce nao client\nThe discord shard_manager\nThe shift client\nShutdown anything that needs to be shut down.\nThe tic tac toe data\nTikTokData\nThe urban dictionary client\nThe xkcd client\nThe yodaspeak client\nHelp Options\nThe command\nCreate a slash help command\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOptions\nCreate a slash command\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA caching deviantart client\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMake a new <code>DeviantartClient</code>.\nSearch for deviantart images with a cache.\nSigns in if necessary\nA caching fml client\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMake a new FmlClient\nRepopulate the cache\nDownload an instagram post\nGet the file extension from a url\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSearch for an image, with caching\nMax images per single request\nA nekos cache\nThe inner cache data\nArguments for the nekos command\nThe nekos client\nAdd a url to the cache\nAdd many urls to the cache\nMake a nekos slash command\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a cache\nGet a random url\nGet a random nekos image\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake a new cache\nMake a new nekos client\nWhether the command should look for nsfw pictures\nRepopulate a cache\nCheck if the primary cache is emoty\nGet the size of the primary cache\nCheck if the secondary cache is empty\nGet the size of the secondary cache\nCreate a slash command\nA Cache for quizzizz codes\nContains the error value\nContains the success value\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if it is empty\nGet the # of entries\nMake a new <code>QuizizzClient</code>.\nMake a new cache\nAdd a code to the cache\nGet the next searched code.\nTrim the cache\nTrim the cache and pop a code if it exists\nOptions for r6stats\nCreate a slash command\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet stats\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe user name\nOptions for r6tracker\nR6Tracker stats for a user\nCreate a slash command\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet R6Tracker stats\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe user name\nMake a new r6 client with caching\nPopulate an embed with data.\nThe value is <code>None</code> if the user could not be found\nCreate a video url for a url to a reddit video post.\nReturns the argument unchanged.\nGet a reddit embed url for a given subreddit and post id\nGet the original post from a given subreddit and post id.\nGet a random post url for a subreddit\nGet video data from reddit.tube.\nGet video data, but using a cache.\nCalls <code>U::from(self)</code>.\nMake a new <code>RedditEmbedData</code>.\nGets the subreddit and post id from a reddit url.\nConvert a reddit link to an embed url\nTry to embed a url\nA caching rule34 client\nOptions for the rule34 command\nCreate a slash command\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSearch for a query.\nMake a new <code>Rule34Client</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSearch for an image, with caching\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a random shift code (PC only for now…)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nData pertaining to running tic_tac_toe games\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake a new <code>TicTacToeData</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nRender a Tic-Tac-Toe board\nUtility to draw a font glyph to a path.\nDraw the winning line\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the inner <code>tiny_skia::Path</code>.\nMake a new <code>Renderer</code>.\nMake a new <code>SkiaBuilder</code>.\nRender a Tic-Tac-Toe board with <code>tiny_skia</code>.\nRender a Tic-Tac-Toe board on a threadpool\nTikTok Data\nOptions for tiktok-embed\nConvert a bool to a str\nCalculate the target bitrate.\nThe inner client\nCreate a slash command\nWhether source messages should be deleted\nWhether embeds should be enabled for this server\nThe encoder task\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a post page, using the cache if needed\nGet video data, using the cache if needed\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake a new <code>TikTokData</code>.\nA cache of post urls =&gt; post pages\nTry embedding a url\nThe path to tiktok’s cache dir\nThe request map for making requests for video downloads.\nA Caching Urban Dictionary Client\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMake a new <code>UrbanClient</code>.\nGet the top result for a query.\nA rust-optimized version of:\nOptions for yodaspeak\nCreate a slash command\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe bot config\nDeviant Config\nFML config\nLog Config\nOpen AI Config\nSauceNao Config\nValidation Errors\nThe api key\nThe api key\nThe application id\nThe cache dir\nData dir\nIf logging directives not given, choose some defaults.\nDeviantArt config\nThe logging directives.\nThe OTLP endpoint\nUnknown extra data\nUnknown extra data\nUnknown extra data\nFML config\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHeaders\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFML API key\nLoad a config from a path\nLoad a config from a str\nThe log config\nThe log file dir\nOpen AI config\nWhether to use opentelemetry\nPassword\nPrefix for the bot\nSauceNao config\nStatus config\nShortcut for getting the status name\nShortcut for getting the status type\nShortcut for getting the status url\nThe test guild\nThe discord token\n<code>ToString::to_string</code>, but without panic on OOM.\nUsername\nValidate a config\nThe author is in a game\nThe database\nError accessing the database\nError accessing the database\nThe move is invalid\nIt is not the user’s turn\nThe next turn executed\nThe user is not in a game\nThe opponent is in a game\nError that may occur while creating a tic-tac-toe game\nError that may occur while performing a tic-tac-toe move\nThe response for making a tic-tac-toe move\nThere was a tie\nThere was a winner\nAccess the db\nMake a new <code>Database</code> in a blocking manner.\nClose the db\nTry to concede a Tic-Tac-Toe game.\nCreate a new tic-tac-toe game\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the reddit embed setting.\nTry to get a tic-tac-toe game by guild and player\nGet the user’s Tic-Tac-Toe scores\nGet the tiktok embed flags.\nGet the top Tic-Tac-Toe scores for the current server\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a command is disabled\nSafety\nDisables or enables a command.\nEnable or disable reddit embeds.\nSet the flags for tiktok embeds.\nGet a key from the store\nPut a key in the store\nGet and Put a key in the store in one action, ensuring the …\nTry to make a tic-tac-toe move\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nAI player\nWhether the bot should delete old links\nA wrapper for a serenity user id\nWhether embeds are enabled\nA String wrapper for a <code>GuildId</code>\nA Tic-Tac-Toe game\nA player of Tic-Tac-Toe\nTic-Tac-Toe scores\nTop Player Tic-Tac-Toe scores\nFlags for TikTok embeds\nAnother user\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe game board\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe number of times the player has conceded\nThe number of times the player has conceded\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nParse this from a rusqlite row.\nGet the opponent of the given user in this <code>TicTacToeGame</code>.\nGet the player for the given team.\nGet the player whos turn it is\nGet whos turn it is\nExtract the user id if this is a user\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nCheck if this player is a computer\nWhether all bits in this flags value are unset.\nCheck if this player is a user\nYield a set of contained flags values.\nYield a set of contained named flags values.\nIterate over all <code>TicTacToePlayer</code>s.\nLosses\nLosses\nGet the “mention” for a user.\nMake a new <code>TicTacToeGame</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe o player\nThe player\nThe intersection of a source flags value with the …\nThe score\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTies\nTies\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTry to make a move.\n<code>ToString::to_string</code>, but without panic on OOM.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nWins\nWins\nThe x player\nThe author is in a game\nError accessing the database\nError accessing the database\nThe move is invalid\nIt is not the user’s turn\nThe next turn executed\nThe user is not in a game\nThe opponent is in a game\nError that may occur while creating a tic-tac-toe game\nError that may occur while performing a tic-tac-toe move\nThe response for making a tic-tac-toe move\nThere was a tie\nThere was a winner\nTry to make a user’s score data\nSet a tic-tac-toe game as a draw as part of a larger …\nSet a tic-tac-toe game as a win as part of a larger …\nA writer that buffers data until it is assigned a file to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new DelayWriter\nTry to setup a logger.\nThe buffered data.\nA writer that buffers data until it is assigned a file to …\nThe mut impl of a DelayWriter\nThe file being written to.\nReturns the argument unchanged.\nTry to init this DelayWriterInner with a file.\nTry to init this DelayWriter\nCalls <code>U::from(self)</code>.\nMake a new DelayWriterInner with an empty buffer\nLoad a config.\nAn ascii table\nA task to re-encode things\nThis type attaches to a message and displays a loading …\nA cache with entries that “expire” after a per-cache …\nSource: https://urlregex.com/\nGet an iterator over urls in text.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nAn ascii table\nMake a new table\nSet the value of the given cell.\nSet the amount of spaces applied to each element\nRequest a shutdown.\nRequest an encode\nA task to re-encode things\nA builder for encoding messages\nGet encoders available to the application\nA message for the encoder task\nSet the audio codec\nRequest this task to close\nCreate a builder for an encode request\nImpl for the encoder task\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet encoders\nSet the file input\nSet the input format\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJoin this task, waiting for it to exit.\nMake a new encoder task\nMake a new <code>EncoderTaskEncodeBuilder</code>\nSet the file output\nSet the output format\nSet the preset\nShutdown the task, sending a close request can joining the …\nTry to send the message, exiting it it is at capacity\nSet the video bitrate\nSet the video codec\nSet the # of video frames from the input\nSet the video profile\nThe options for the encode\nThe response\nThe notification for when the task is processed, as well …\nThe notification for when the task processes this message\nWhether to validate the encoder.\nThis type attaches to a message and displays a loading …\nCreate a Loading Reaction attatched to a message.\nSend the <code>Fail</code> reaction\nSend the <code>Ok</code> reaction\nSend a reaction.\n10 minutes\nA cache with entries that “expire” after a per-cache …\nGet data ref\nTrims expired entries, ignoring last trim time.\nReturns the argument unchanged.\nGet a value if fresh, or None if it doesn’t exist or is …\nGet a random fresh value\nInsert a K/V\nInsert a K/V and return the data for the newly inserted …\nCalls <code>U::from(self)</code>.\nChecks if cache is empty. Included expired entries.\ntime is expire time\nGets the number of entries. Includes expired entries.\nCreate a cache with timed entries with a default expire …\nTrims expired entries")