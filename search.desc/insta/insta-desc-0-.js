searchState.loadedDescShard("insta", 0, "AdditionalDataLoaded\nA carousel\nA Client\nAn implementation for storing and retrieving <code>Cookie</code>s per …\nA <code>cookie_store::CookieStore</code> wrapped internally by a …\nError type\nJson\nInstagram is forcing a log-in\nThe response for a login\nMissing additionalDataLoaded\nMissing a csrf token\nA Photo\nA Post Page\nReqwest Error\nA video\nWhether the user successfully logged in\n?\nClear the contents of the store\nThe inner http client.\nReturns true if the <code>CookieStore</code> contains an <strong>unexpired</strong> …\nReturns true if the <code>CookieStore</code> contains any (even an …\nThe inner cookie store.\nCreate a new, empty <code>CookieStoreMutex</code>\nExtra fields\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>CookieStore</code> from an iterator of <code>Cookie</code> values. …\nReturns a reference to the <strong>unexpired</strong> <code>Cookie</code> corresponding …\nReturns a reference to the (possibly <strong>expired</strong>) <code>Cookie</code> …\nGet a post by url.\nReturn an <code>Iterator</code> of the cookies for <code>url</code> in the store, …\nReturn an <code>Iterator</code> of the cookie (<code>name</code>, <code>value</code>) pairs for …\nInserts <code>cookie</code>, received from <code>request_url</code>, into the store, …\nConverts a <code>cookie::Cookie</code> (from the <code>cookie</code> crate) into a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this <code>CookieStoreMutex</code>, returning the underlying …\n?\nAn iterator visiting all (including <strong>expired</strong>) cookies in …\nAn iterator visiting all the <strong>unexpired</strong> cookies in the store\nLoad cookies from <code>reader</code>, deserializing with …\nLoad cookies from <code>reader</code>, deserializing with …\nLoad JSON-formatted cookies from <code>reader</code>, skipping any …\nLoad JSON-formatted cookies from <code>reader</code>, loading both …\nLock and get a handle to the contained …\nLog in\nReturns a collection of references to <strong>unexpired</strong> cookies …\n?\nCreate a new <code>CookieStoreMutex</code> from an existing …\nMake a new <code>Client</code>.\n?\nParses a new <code>Cookie</code> from <code>cookie_str</code> and inserts it into …\nRemoves a <code>Cookie</code> from the store, returning the <code>Cookie</code> if …\nSerialize any <strong>unexpired</strong> and <strong>persistent</strong> cookies in the …\nSerialize all (including <strong>expired</strong> and <strong>non-persistent</strong>) …\nSerialize all (including <strong>expired</strong> and <strong>non-persistent</strong>) …\nSerialize any <strong>unexpired</strong> and <strong>persistent</strong> cookies in the …\n?\nStore the <code>cookies</code> received from <code>url</code>\n<code>ToString::to_string</code>, but without panic on OOM.\n?\nMake a new <code>Client</code> from a CookieStore.\nSpecify a <code>publicsuffix::List</code> for the <code>CookieStore</code> to allow …")